package project

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/alantheprice/ledit/pkg/config"
	"github.com/alantheprice/ledit/pkg/prompts"
	"github.com/alantheprice/ledit/pkg/types"
	"github.com/alantheprice/ledit/pkg/utils"
)

// ProjectGoals represents the autogenerated goals for the project.
type ProjectGoals struct {
	OverallGoal      string   `json:"overall_goal"`
	ShortTermGoals   []string `json:"short_term_goals"`
	LongTermGoals    []string `json:"long_term_goals"`
	UserStories      []string `json:"user_stories"`
	SuccessMetrics   []string `json:"success_metrics"`
	TechnicalDebt    []string `json:"technical_debt"`
	ExternalAPIs     []string `json:"external_apis"`
	PrimaryAudience  string   `json:"primary_audience"`
	KeyFunctionality []string `json:"key_functionality"`
}

// ProjectInsights represents additional inferred attributes about the project.
type ProjectInsights struct {
	PrimaryLanguage    string   `json:"primary_language"`
	Frameworks         []string `json:"frameworks"`
	Databases          []string `json:"databases"`
	DeploymentTarget   string   `json:"deployment_target"`
	TestingStrategy    string   `json:"testing_strategy"`
	CodeComplexity     string   `json:"code_complexity"`
	TeamSize           string   `json:"team_size"`
	CommunicationStyle string   `json:"communication_style"`
}

// LLMProvider defines the interface for an LLM provider
type LLMProvider interface {
	GetLLMResponse(modelName string, messages []prompts.Message, filename string, cfg *config.Config, timeout time.Duration, imagePath ...string) (string, *types.TokenUsage, error)
}

// GetProjectGoals uses an LLM to autogenerate project goals based on the workspace summary.
func GetProjectGoals(cfg *config.Config, workspaceSummary string, provider LLMProvider) (ProjectGoals, error) {
	log := utils.GetLogger(cfg.SkipPrompt)

	messages := prompts.BuildProjectGoalsMessages(workspaceSummary)

	modelName := cfg.WorkspaceModel // Use the workspace model for generating project goals

	response, _, err := provider.GetLLMResponse(modelName, messages, "", cfg, 2*time.Minute)
	if err != nil {
		return ProjectGoals{}, fmt.Errorf("failed to get project goals from LLM: %w", err)
	}
	// Log the raw LLM response for troubleshooting
	log.Logf("DEBUG: Raw LLM Response for project goals:\n%s\n", response)

	// Clean the response from markdown code blocks
	if strings.Contains(response, "```json") {
		parts := strings.SplitN(response, "```json", 2)
		if len(parts) > 1 {
			response = strings.Split(parts[1], "```")[0]
		} else if strings.HasPrefix(response, "```") && strings.HasSuffix(response, "```") {
			response = strings.TrimPrefix(response, "```")
			response = strings.TrimSuffix(response, "```")
		}
	}

	log.Log(fmt.Sprintf("DEBUG: Cleaned LLM Response for project goals:\n%s\n", response))

	var goals ProjectGoals
	if err := json.Unmarshal([]byte(response), &goals); err != nil {
		log.Logf("DEBUG: Failed to unmarshal project goals JSON: %s\n", response)
		return ProjectGoals{}, fmt.Errorf("failed to parse project goals JSON from LLM response: %w\nResponse was: %s", err, response)
	}

	return goals, nil
}

// GetProjectInsights uses an LLM to infer additional project attributes from an overview.
func GetProjectInsights(cfg *config.Config, workspaceOverview string, provider LLMProvider) (ProjectInsights, error) {
	logger := utils.GetLogger(cfg.SkipPrompt)
	messages := prompts.BuildProjectInsightsMessages(workspaceOverview)
	modelName := cfg.WorkspaceModel

	response, _, err := provider.GetLLMResponse(modelName, messages, "", cfg, 2*time.Minute)
	if err != nil {
		return ProjectInsights{}, fmt.Errorf("failed to get project insights from LLM: %w", err)
	}
	logger.Logf("DEBUG: Raw LLM Response for project insights:\n%s\n", response)

	// Clean potential code fences
	if strings.Contains(response, "```json") {
		parts := strings.SplitN(response, "```json", 2)
		if len(parts) > 1 {
			response = strings.Split(parts[1], "```")[0]
		} else if strings.HasPrefix(response, "```") && strings.HasSuffix(response, "```") {
			response = strings.TrimPrefix(response, "```")
			response = strings.TrimSuffix(response, "```")
		}
	}

	logger.Log(fmt.Sprintf("DEBUG: Cleaned LLM Response for project insights:\n%s\n", response))

	var insights ProjectInsights
	if err := json.Unmarshal([]byte(response), &insights); err != nil {
		logger.Logf("DEBUG: Failed to unmarshal project insights JSON: %s\n", response)
		return ProjectInsights{}, fmt.Errorf("failed to parse project insights JSON from LLM response: %w\nResponse was: %s", err, response)
	}
	return insights, nil
}
