{
  "id": "fix_concurrent_access_bugs_real",
  "name": "Real Codebase - Fix Concurrent Access Bugs",
  "description": "Find and fix realistic race conditions in ledit's workspace cache and agent state management",
  "category": "real_world",
  "difficulty": "expert",
  "estimated_time_minutes": 12,
  "git_setup": {
    "base_branch": "main",
    "test_branch": "test/agentic-concurrency-bugs",
    "temp_directory": "/tmp/ledit_concurrent_test_{timestamp}",
    "repository_url": "local",
    "introduced_changes": {
      "files_to_modify": [
        "pkg/workspace/workspace_manager.go",
        "pkg/agent/context_manager.go",
        "pkg/orchestration/coordinator.go",
        "pkg/workspace/workspace_context.go"
      ],
      "issues_to_introduce": [
        "Remove mutex protection from map access in workspace cache",
        "Add unsynchronized write to shared state in context manager", 
        "Create race condition in orchestration coordinator state",
        "Remove atomic operations from counter updates"
      ]
    }
  },
  "input": {
    "prompt": "This Go codebase has race conditions causing intermittent panics and data corruption under concurrent load. Please:\n\n1. **Identify Race Conditions**: Use your knowledge of Go concurrency to find all race conditions\n2. **Analyze Root Causes**: Explain why each race condition occurs and its potential impact\n3. **Implement Fixes**: Add proper synchronization using Go's concurrency primitives (sync.Mutex, sync.RWMutex, atomic operations)\n4. **Verify Thread Safety**: Ensure all shared data structures are properly protected\n5. **Performance Considerations**: Choose the most appropriate synchronization primitive for each case\n\nThe fixes should pass when run with `go test -race` and maintain good performance under concurrent access.",
    "working_directory": "{temp_directory}",
    "context": "You are working on the ledit codebase. The workspace manager caches file analysis results, the context manager maintains agent state, and the orchestration coordinator manages multi-agent workflows. All of these components are accessed concurrently."
  },
  "expected_outputs": {
    "race_conditions_identified": true,
    "root_cause_analysis": true, 
    "synchronization_implemented": true,
    "thread_safety_ensured": true,
    "performance_optimized": true,
    "race_detector_clean": true
  },
  "evaluation": {
    "agentic_capabilities": [
      "concurrency_analysis",
      "race_condition_detection",
      "synchronization_design",
      "performance_optimization",
      "testing_strategy"
    ],
    "technical_requirements": [
      "identifies_all_race_conditions",
      "implements_proper_mutexes",
      "uses_atomic_operations_correctly",
      "maintains_deadlock_freedom",
      "passes_race_detector",
      "preserves_performance"
    ],
    "implementation_quality": [
      "minimal_locking_scope",
      "appropriate_sync_primitives",
      "clear_concurrency_documentation",
      "comprehensive_testing",
      "edge_case_handling"
    ]
  },
  "scoring": {
    "max_points": 100,
    "race_detection": 30,
    "synchronization_implementation": 35,
    "performance_optimization": 20,
    "testing_and_validation": 15
  },
  "success_criteria": {
    "must_have": [
      "Identifies major race conditions",
      "Implements mutex/atomic protection",
      "Code compiles without errors",
      "Passes basic functionality tests"
    ],
    "should_have": [
      "Passes go test -race cleanly",
      "Uses appropriate sync primitives",
      "Maintains good performance", 
      "Documents concurrency decisions",
      "Handles edge cases properly"
    ],
    "nice_to_have": [
      "Provides benchmarking comparisons",
      "Suggests monitoring strategies",
      "Implements lock-free optimizations where appropriate",
      "Includes concurrent stress tests"
    ]
  },
  "validation": {
    "compilation_check": "go build ./...",
    "race_detection": "go test -race ./pkg/workspace/... ./pkg/agent/... ./pkg/orchestration/... -timeout 60s",
    "unit_tests": "go test ./pkg/workspace/... ./pkg/agent/... ./pkg/orchestration/... -timeout 30s",
    "lint_check": "golangci-lint run ./pkg/workspace/... ./pkg/agent/... ./pkg/orchestration/...",
    "deadlock_check": "timeout 30s go test -race -count=10 ./pkg/orchestration/... || echo 'Potential deadlock or slow test'"
  }
}