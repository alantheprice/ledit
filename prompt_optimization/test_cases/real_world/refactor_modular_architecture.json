{
  "id": "refactor_modular_architecture_real",
  "name": "Real Codebase - Modular Architecture Refactor",
  "description": "Refactor actual ledit agent architecture to improve modularity and testability",
  "category": "real_world",
  "difficulty": "expert",
  "estimated_time_minutes": 15,
  "git_setup": {
    "base_branch": "main",
    "test_branch": "test/agentic-refactor-modular",
    "temp_directory": "/tmp/ledit_agentic_test_{timestamp}",
    "repository_url": "local",
    "introduced_changes": {
      "files_to_modify": [
        "pkg/agent/agent.go",
        "pkg/agent/models.go", 
        "pkg/agent_api/interface.go",
        "pkg/orchestration/coordinator.go"
      ],
      "issues_to_introduce": [
        "Add circular import between agent and orchestration",
        "Remove interface abstractions from agent_api",
        "Add direct struct dependencies instead of interfaces",
        "Duplicate error handling code across files",
        "Hardcode configuration values instead of using config"
      ]
    }
  },
  "input": {
    "prompt": "This codebase has accumulated some architectural debt that's making it hard to test and maintain. Please analyze the current agent architecture and refactor it to be more modular, testable, and maintainable. Focus on:\n\n1. **Dependency Injection**: Replace direct dependencies with interfaces\n2. **Circular Dependencies**: Identify and fix any circular imports  \n3. **Error Handling**: Standardize error handling patterns\n4. **Configuration**: Ensure all configuration is properly abstracted\n5. **Testability**: Make components easily mockable for unit testing\n\nPlease provide a comprehensive refactoring plan and implement the key improvements.",
    "working_directory": "{temp_directory}",
    "context": "You are working on the ledit codebase, an AI-powered code editing tool. The agent system is the core component that orchestrates code generation and editing operations."
  },
  "expected_outputs": {
    "architectural_analysis": true,
    "refactoring_plan": true,
    "interface_definitions": true,
    "dependency_injection": true,
    "circular_dependency_fixes": true,
    "error_handling_standardization": true,
    "configuration_abstraction": true,
    "unit_test_improvements": true
  },
  "evaluation": {
    "agentic_capabilities": [
      "codebase_analysis",
      "architectural_design", 
      "refactoring_strategy",
      "dependency_management",
      "interface_design",
      "testing_considerations"
    ],
    "technical_requirements": [
      "identifies_circular_dependencies",
      "creates_proper_interfaces",
      "implements_dependency_injection", 
      "standardizes_error_handling",
      "abstracts_configuration",
      "improves_testability",
      "maintains_backward_compatibility"
    ],
    "implementation_quality": [
      "clean_architecture_principles",
      "solid_design_patterns",
      "comprehensive_refactoring",
      "performance_considerations",
      "documentation_updates"
    ]
  },
  "scoring": {
    "max_points": 100,
    "analysis_and_planning": 25,
    "architecture_improvements": 35,
    "implementation_quality": 25,
    "testability_enhancements": 15
  },
  "success_criteria": {
    "must_have": [
      "Identifies major architectural issues",
      "Provides detailed refactoring plan", 
      "Implements interface abstractions",
      "Fixes circular dependencies",
      "Code compiles and runs after changes"
    ],
    "should_have": [
      "Standardizes error handling patterns",
      "Improves dependency injection",
      "Abstracts configuration properly",
      "Enhances unit testability",
      "Updates relevant documentation"
    ],
    "nice_to_have": [
      "Suggests performance improvements",
      "Provides migration strategy",
      "Includes example unit tests",
      "Documents design decisions",
      "Considers future extensibility"
    ]
  },
  "validation": {
    "compilation_check": "go build ./...",
    "test_execution": "go test ./... -timeout 30s",
    "race_detection": "go test -race ./pkg/agent/... -timeout 30s",
    "lint_check": "golangci-lint run ./pkg/agent/...",
    "import_analysis": "go list -json ./... | jq '.Deps' | grep -E 'circular|cycle'"
  }
}