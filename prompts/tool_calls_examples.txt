TOOL_CALLS EXAMPLES (MANDATORY FORMAT):
- Emit tool calls using OpenAI-style function calling JSON. Arguments must be a JSON string.
- Do NOT include prose; emit only the JSON object with a top-level "tool_calls" array when requesting tools.

Example 1: Discover and read a target file before editing
```json
{
  "tool_calls": [
    {
      "id": "call_1",
      "type": "function",
      "function": {
        "name": "workspace_context",
        "arguments": "{\"action\":\"search_keywords\",\"query\":\"no tool calls parsed retry logic\"}"
      }
    },
    {
      "id": "call_2",
      "type": "function",
      "function": {
        "name": "read_file",
        "arguments": "{\"file_path\":\"pkg/llm/unified_interactive.go\"}"
      }
    }
  ]
}
```

Example 2: Read multiple files before any patches
```json
{
  "tool_calls": [
    {"id":"c1","type":"function","function":{"name":"read_file","arguments":"{\"file_path\":\"pkg/llm/api.go\"}"}},
    {"id":"c2","type":"function","function":{"name":"read_file","arguments":"{\"file_path\":\"pkg/llm/tools.go\"}"}}
  ]
}
```

Example 3: Confirm directory structure before creating a new file
```json
{
  "tool_calls": [
    {"id":"c1","type":"function","function":{"name":"workspace_context","arguments":"{\"action\":\"load_tree\",\"dir\":\"pkg/llm\"}"}}
  ]
}
```

Example 4: Validate a file (syntax check)
```json
{
  "tool_calls": [
    {"id":"v1","type":"function","function":{"name":"validate_file","arguments":"{\"file_path\":\"pkg/llm/api.go\",\"validation_type\":\"syntax\"}"}}
  ]
}
```

Example 5: Apply a micro edit
```json
{
  "tool_calls": [
    {"id":"m1","type":"function","function":{"name":"micro_edit","arguments":"{\"file_path\":\"pkg/llm/api.go\",\"instructions\":\"Add a package comment at the top\"}"}}
  ]
}
```

Example 6: Edit a specific section of a file
```json
{
  "tool_calls": [
    {"id":"e1","type":"function","function":{"name":"edit_file_section","arguments":"{\"file_path\":\"pkg/llm/unified_interactive.go\",\"instructions\":\"Add a comment above retry logic\",\"target_section\":\"callLLMWithToolsUnified\"}"}}
  ]
}
```

Example 7: Run a shell command
```json
{
  "tool_calls": [
    {"id":"sh1","type":"function","function":{"name":"run_shell_command","arguments":"{\"command\":\"go build\"}"}}
  ]
}
```

Example 8: Ask the user for clarification
```json
{
  "tool_calls": [
    {"id":"q1","type":"function","function":{"name":"ask_user","arguments":"{\"question\":\"Which file should be updated?\"}"}}
  ]
}
```

Example 9: Attempt to auto-fix validation issues
```json
{
  "tool_calls": [
    {"id":"fx1","type":"function","function":{"name":"fix_validation_issues","arguments":"{\"file_path\":\"pkg/llm/api.go\",\"error_description\":\"undeclared symbol\"}"}}
  ]
}
```

Example 10: Preflight checks before editing
```json
{
  "tool_calls": [
    {"id":"pf1","type":"function","function":{"name":"preflight","arguments":"{\"file_path\":\"pkg/llm/api.go\"}"}}
  ]
}
```

Rules Recap:
- Always call read_file on every file you will modify BEFORE emitting patches.
- If you haven't read a file, emit only tool_calls; do not generate code or patches yet.
- Use workspace_context to discover candidates, then read_file them.
- Arguments payload must be valid JSON encoded as a string.
