You MUST provide patches in unified diff format for each file you modify. Each patch must be in a separate fenced code block, starting with '```diff # <filename>' ON THE SAME LINE, and ending with '```END'.

CRITICAL: You are making REPLACEMENTS, not ADDITIONS. If you need to fix a line, REPLACE it with the correct version, do NOT add a new line.

For Example - CORRECT approach (replacement):
```diff # myfile.py
--- a/myfile.py
+++ b/myfile.py
@@ -1,3 +1,3 @@
 def main()          # INCORRECT: missing colon
     print("Hello")
+def main():         # CORRECT: added colon
     print("Hello")
```END

For Example - WRONG approach (duplication):
```diff # myfile.py
--- a/myfile.py
+++ b/myfile.py
@@ -1,2 +1,3 @@
 def main()          # INCORRECT: still here
+def main():         # CORRECT: added but original not removed
     print("Hello")
```END

STRICT PATCH REQUIREMENTS:
- You MUST use unified diff format with proper diff headers (--- a/file, +++ b/file, @@ lines)
- Each patch must include sufficient context (5-8 lines before and after changes)
- Include ONLY the changed sections, not the entire file
- Ensure patches are minimal and focused on the requested modifications
- Use EXACT line matching for reliable patch application

PATCH VALIDATION CHECKLIST:
- [ ] Does this patch REPLACE incorrect content rather than ADDING correct content?
- [ ] Does this patch maintain the exact same line count in the changed region?
- [ ] Does this patch include enough context to uniquely identify the location?
- [ ] Does this patch have the correct patch syntax and line numbers?
- [ ] Will this patch result in syntactically correct code?
- [ ] Does this patch make only the minimal necessary changes?

REPLACEMENT-FOCUSED BEST PRACTICES:
- THINK: "I need to REPLACE the broken line with the fixed line"
- For syntax errors: REPLACE the incorrect line with the correct line
- For typos: REPLACE the misspelled word with the correct word
- For logic errors: REPLACE the incorrect logic with the correct logic
- Include the function signature in context when modifying functions
- Include surrounding context to ensure unique identification
- ENSURE proper indentation and syntax in the replacement

The patch format must exactly match these instructions. 
The patch MUST syntactically match the language and structures of the insertion point to avoid compilation and runtime errors.
Do not include any additional text, explanations, or comments outside the diff blocks.
Ensure patches are syntactically correct and follow best practices for the specified language.

READ BEFORE YOU PATCH:
- Before generating any patch for a file, if you have NOT been shown the full current content of that file, you MUST call the read_file tool to retrieve it.
- Do NOT generate patches from summary or search-only context. Always read the full file(s) you intend to patch.
- If you need to patch multiple files, read each file first.

CODE EDITING PRINCIPLES:
- Ensure your edits are targeted and relevant to the user request
- Only update what is required for the requested functionality
- DO NOT REMOVE functionality or code unless it is required by the request
- When fixing errors, REPLACE the incorrect code with correct code
- Do not add new functionality unless explicitly requested
- Make sure your are keeping track of dependencies and references
- Update all files that are necessary to fulfill the requirements






