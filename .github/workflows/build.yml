name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          # Install basic dependencies for integration tests
          pip install requests pytest
        fi

    - name: Install dependencies
      run: go mod download

    - name: Run unit tests
      run: make test-unit

    - name: Run integration tests
      run: make test-integration

    - name: Run smoke tests
      run: make test-smoke

  build:
    name: Build Binaries
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Install dependencies
      run: go mod download

    - name: Set build variables
      id: set_vars
      shell: bash
      run: |
        OS_NAME=""
        EXT=""
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          OS_NAME="windows"
          EXT=".exe"
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          OS_NAME="darwin"
        else
          OS_NAME="linux"
        fi
        echo "os_name=${OS_NAME}" >> $GITHUB_OUTPUT
        echo "ext=${EXT}" >> $GITHUB_OUTPUT
        echo "binary_name=ledit-${OS_NAME}-${{ matrix.arch }}" >> $GITHUB_OUTPUT

    - name: Build
      env:
        GOOS: ${{ steps.set_vars.outputs.os_name }}
        GOARCH: ${{ matrix.arch }}
      run: go build -o ${{ steps.set_vars.outputs.binary_name }}${{ steps.set_vars.outputs.ext }} .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.set_vars.outputs.binary_name }}
        path: ${{ steps.set_vars.outputs.binary_name }}${{ steps.set_vars.outputs.ext }}