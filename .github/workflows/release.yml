name: Release

on:
  push:
    tags:
      - 'v*' # Triggers on pushes to tags like v1.0.0, v1.1.0-beta, etc.

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          # Install basic dependencies for integration tests
          pip install requests pytest
        fi

    - name: Install dependencies
      run: go mod download

    - name: Run unit tests
      run: make test-unit

    - name: Run integration tests
      run: make test-integration

    - name: Run smoke tests
      run: make test-smoke

  build:
    name: Build and Release
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a GitHub Release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for changelog generation

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      run: |
        # Generate changelog from git history since last tag
        VERSION=${GITHUB_REF#refs/tags/}
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Create temporary changelog for this release
        TEMP_CHANGELOG=$(mktemp)
        
        echo "## [$VERSION] - $(date +%Y-%m-%d)" > $TEMP_CHANGELOG
        echo "" >> $TEMP_CHANGELOG
        
        if [ -n "$LAST_TAG" ]; then
          git log --pretty=format:"- %s (%h)" --abbrev-commit "$LAST_TAG..HEAD" >> $TEMP_CHANGELOG 2>/dev/null || \
          echo "- No changes detected since last tag" >> $TEMP_CHANGELOG
        else
          echo "- Initial release" >> $TEMP_CHANGELOG
        fi
        echo "" >> $TEMP_CHANGELOG
        
        # If CHANGELOG.md exists, prepend new content; otherwise create fresh
        if [ -f "CHANGELOG.md" ]; then
          # Insert new release section at the top (after header)
          HEADER=$(head -n 4 CHANGELOG.md)
          TAIL=$(tail -n +5 CHANGELOG.md)
          echo "$HEADER" > CHANGELOG.md.new
          echo "" >> CHANGELOG.md.new
          cat $TEMP_CHANGELOG >> CHANGELOG.md.new
          echo "" >> CHANGELOG.md.new
          echo "$TAIL" >> CHANGELOG.md.new
          mv CHANGELOG.md.new CHANGELOG.md
        else
          # Create new changelog
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to ledit will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat $TEMP_CHANGELOG >> CHANGELOG.md
        fi
        
        rm -f $TEMP_CHANGELOG
        echo "Generated changelog for $VERSION"
        cat CHANGELOG.md

    - name: Commit changelog
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "docs: Update changelog for $VERSION" || echo "No changes to commit"
        git push origin HEAD:main

    - name: Update README with version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [ -f "README.md" ]; then
          sed -i.bak -E "s/(Version: )[^ ]+/\1$VERSION/" README.md
          rm -f README.md.bak
          echo "Updated README with version $VERSION"
        fi

    - name: Build multi-platform binaries
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=$(git rev-parse --short HEAD)
        DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build ldflags
        LDFLAGS="-X 'github.com/alantheprice/ledit/cmd.version=$VERSION'"
        LDFLAGS="$LDFLAGS -X 'github.com/alantheprice/ledit/cmd.gitCommit=$COMMIT'"
        LDFLAGS="$LDFLAGS -X 'github.com/alantheprice/ledit/cmd.buildDate=$DATE'"
        LDFLAGS="$LDFLAGS -X 'github.com/alantheprice/ledit/cmd.gitTag=$VERSION'"
        
        echo "Using ldflags: $LDFLAGS"
        
        # Build for Linux (AMD64)
        GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o ledit-linux-amd64 .
        tar -czvf ledit-linux-amd64.tar.gz ledit-linux-amd64
        
        # Build for Linux (ARM64)
        GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o ledit-linux-arm64 .
        tar -czvf ledit-linux-arm64.tar.gz ledit-linux-arm64

        # Build for Windows (AMD64)
        GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o ledit-windows-amd64.exe .
        zip ledit-windows-amd64.zip ledit-windows-amd64.exe

        # Build for macOS (AMD64)
        GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o ledit-darwin-amd64 .
        tar -czvf ledit-darwin-amd64.tar.gz ledit-darwin-amd64

        # Build for macOS (ARM64)
        GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o ledit-darwin-arm64 .
        tar -czvf ledit-darwin-arm64.tar.gz ledit-darwin-arm64

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ledit-linux-amd64.tar.gz
          ledit-linux-arm64.tar.gz
          ledit-windows-amd64.zip
          ledit-darwin-amd64.tar.gz
          ledit-darwin-arm64.tar.gz
        name: Release ${{ steps.get_version.outputs.VERSION }}
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Release ${{ steps.get_version.outputs.VERSION }}

          This release includes multi-platform binaries built with proper version information.

          ### Binaries
          - `ledit-linux-amd64.tar.gz` - Linux AMD64
          - `ledit-linux-arm64.tar.gz` - Linux ARM64
          - `ledit-windows-amd64.zip` - Windows AMD64
          - `ledit-darwin-amd64.tar.gz` - macOS Intel
          - `ledit-darwin-arm64.tar.gz` - macOS Apple Silicon

          ### Version Information
          Each binary includes:
          - Version: ${{ steps.get_version.outputs.VERSION }}
          - Git commit information
          - Build timestamp

          Run `ledit version` to see detailed version information.

          For installation instructions, please refer to the README.md documentation.
        draft: false
        prerelease: false